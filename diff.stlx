load("util.stlx");
load("rules.stlx");
load("ops.stlx");


class global() {
	static {
		rules := makeDefaultRules();
		varTable := makeDefaultVarTable();
		DEBUG := false;
	}
}


eval := procedure(expr, rw memo, rules := global.rules) {
	// stop("eval");
	if (global.DEBUG) {
		print("Evaluating $expr$...");
	}
	if (expr in domain(memo)) {
		return memo[expr];
	}
	assert(isTerm(expr), "eval expects 'expr' to be a term, instead received: $expr$");

	match(expr) {
		case @Number(n):
			memo[expr] := expr;
		case @Name(s):
			memo[expr] := expr;
		case @Func(f, params):
			if (f in domain(rules)) {
				if (global.DEBUG) {
					print("func: $f$ - params: $params$");
				}
				params := [ eval(p, memo, rules) : p in params ];
				for (r in rules[f]) {
					assert(#r == 2, "Each rule is expected to have exactly 2 elements");
					t := r[1];
					e := r[2];
					if (t(params)) {
						res := e(params);
						if (global.DEBUG) {
							print("Applied rule: $r$");
							print("Result: $res$");
						}
						memo[expr] := eval(res, memo, rules);
						break;
					}
				}
				if (expr notin domain(memo)) {
					memo[expr] := @Func(f, params);
				}
			} else {
				abort("Error at eval($expr$) - Function not found in rules.");
			}
		case @Op(op, params):
			if (op in domain(rules)) {
				if (global.DEBUG) {
					print("op: $op$ - params: $params$");
				}
				params := [ eval(p, memo, rules) : p in params ];
				for (r in rules[op]) {
					assert(#r == 2, "Each rule is expected to have exactly 2 elements");
					t := r[1];
					e := r[2];
					if (t(params)) {
						res := e(params);
						if (global.DEBUG) {
							print("Applied rule: $r$");
							print("Result: $res$");
						}
						memo[expr] := eval(res, memo, rules);
						break;
					}
				}

				if (expr notin domain(memo)) {
					if (global.DEBUG) {
						print("No applicable rule - returning $@Op(op, params)$");
					}
					memo[expr] := @Op(op, params);
				}
			} else {
				abort("Error at eval($expr$) - Operation not found in rules.");
			}
		case @UnaryOp(op, param):
			if (op in domain(rules)) {
				if (global.DEBUG) {
					print("unaryOp: $op$ - param: $param$");
				}
				params := [eval(param, memo, rules)];
				for (r in rules[op]) {
					assert(#r == 2, "Each rule is expected to have exactly 2 elements");
					t := r[1];
					e := r[2];
					if (t(params)) {
						res := e(params);
						if (global.DEBUG) {
							print("Applied rule: $r$");
							print("Result: $res$");
						}
						memo[expr] := eval(res, memo, rules);
						break;
					}
				}
				if (expr notin domain(memo)) {
					memo[expr] := @UnaryOp(op, params);
				}
			} else {
				abort("Error at eval($expr$) - Unary Operation not found in rules.");
			}
		default: abort("Error at eval($expr$) - Unknown Expression.");
	}
	return memo[expr];
};

idxOfClosedParan := procedure(tokens) {
	if (global.DEBUG) {
		print("Finding index of closed parantheses $tokens$...");
	}
	parans := 1;
	i := 1;
	while (parans != 0 && i <= #tokens) {
		match(tokens[i]) {
			case @TokParanOpen():
				parans += 1;
			case @TokParanClosed():
				parans -= 1;
		}
		i += 1;
	}

	if (parans == 0) {
		return i-1;
	} else {
		abort("Error at idxOfClosedParan($tokens$): Unmatched Parantheses.");
	}
};

parse := procedure(tokens, rw varTable) {
	if (isString(tokens)) {
		tokens := tokenize(tokens);
	}
	xs := splitBy(tokens, @TokWhere());
	exprTokens := xs[1];
	for (toks in reverse(xs[2..])) {
		parseAssignment(toks, varTable);
	}
	return parseExpr(xs[1], varTable);
};

parseAssignment := procedure(tokens, rw varTable) {
	assert(fct(tokens[1]) == "TokName", "The first token in an assignment must be a name, instead received $tokens[1]$");
	assert(tokens[2] == @TokEqual(), "The second token in an assignment must be an equal-sign, instead received $tokens[2]$");

	var := args(tokens[1])[1];
	if (var in domain(varTable)) {
		abort("Error at parseAssignment($tokens$) - $var$ is already defined. You can't overwrite variable definitions.");
	}
	if (@TokName(var) in tokens[3..]) {
		abort("Error at parseAssignment($tokens$) - Recursive definitions are not allowed.");
	}

	expr := parseExpr(tokens[3..], varTable);
	varTable[var] := expr;
};

parseExprList := procedure(tokens, rw varTable) {
	if (global.DEBUG) {
		print("Parsing expression-list $tokens$...");
	}

	exprs := [];
	parans := 1;
	i := 1;
	while (parans != 0 && #tokens >= i) {
		match(tokens[i]) {
			case @TokParanOpen():
				parans += 1;
			case @TokParanClosed():
				parans -= 1;
			case @TokComma():
				if (parans == 1) {
					exprs += [tokens[..i-1]];
					tokens := tokens[i+1..];
					i := 0;
				}
		}
		i += 1;
	}

	if (parans == 0) {
		exprs += [tokens[..-2]];
		exprs := [ parseExpr(x, varTable) : x in exprs ];
		return exprs;
	} else {
		abort("Error at parseExprList($tokens$): Unmatched Parantheses.");
	}
};

parseExpr := procedure(tokens, rw varTable, last := om, lastPrec := om, paranLevel := 0) {
	if (global.DEBUG) {
		print("Parsing expression $tokens$ with last: $last$...");
	}
	if (tokens == []) {
		return last;
	}
	if (last == om && fct(tokens[1]) != "TokOp") {
		if (global.DEBUG) {
			print("last is om && first token is not op: $tokens[1]$");
		}
		return parseTerm(tokens, varTable, true, paranLevel);
	}

	expr := om;
	token := tokens[1];
	tokens := tokens[2..];
	currPrec := om;
	match(token) {
		case @TokOp(op):
			assert(tokens != [], "An operator must be followed by an expression");
			next := parseTerm(tokens, varTable, false, paranLevel);
			currPrec := getOpPrec(op) + paranLevel * getMaxPrec();
			if (global.DEBUG) {
				print("next: $next$");
				print("lastPrec: $lastPrec$");
				print("currPrec: $currPrec$");
				print("last: $last$");
			}
			if (last == om) {
				expr := @UnaryOp(op, next);
			} else if (fct(last) == "Op") {
				[lastOp, params] := args(last);
				assert(lastPrec != om, "Expects lastPrec to be a number, when last was an operation.");
				assert(#params >= 2, "There must be at least 2 parameters for a prefix operator. The operator $lastOp$ only received the parameters $params$");

				if (op == lastOp && isOpAssoc(op)) {
					expr := @Op(op, params + [next]);
				} else if (op == lastOp && isOpRightAssoc(op)) {
					assert(#params == 2, "Right-Associative operations, that aren't also left-associative are assumed to always take exactly 2 operands.");
					expr := @Op(op, [params[1], @Op(op, [params[2], next])]);
				} else if (lastPrec < currPrec) {
					expr := @Op(lastOp, params[..-2] + [@Op(op, [params[-1], next])]);
					currPrec := lastPrec;
				} else {
					expr := @Op(op, [last, next]);
				}
			} else {
				expr := @Op(op, [last, next]);
			}
		case t | fct(last) in ["Name", "Number"] && fct(token) in ["TokName", "TokNum"]:
			curr := parseTerm([token], varTable, false, 0);
			currPrec := getOpPrec("*") + paranLevel * getMaxPrec();
			expr := @Op("*", [curr, last]);
		default:
			if (global.DEBUG) {
				print("This place seems to be unreachable.");
				stop("parseExpr - default case:");
			}
			expr := parseTerm([token] + tokens, varTable, false, paranLevel);
	}
	if (global.DEBUG) {
		print("Parsing done - Result: $expr$");
	}
	return parseExpr(tokens, varTable, expr, currPrec, paranLevel);
};

parseTerm := procedure(rw tokens, rw varTable, rec := false, paranLevel := 0) {
	assert(tokens != [], "parseTerm expects a non-empty list as input");
	if (global.DEBUG) {
		print("Parsing term $tokens$ with rec: $rec$...");
	}
	match(tokens[1]) {
		case @TokNum(num):
			tokens := tokens[2..];
			if (rec) {
				return parseExpr(tokens, varTable, @Number(num), om, paranLevel);
			} else {
				return @Number(num);
			}
		case @TokName(name):
			res := @Name(name);
			prec := om;
			tokens := tokens[2..];
			isFollowedByParans := #tokens > 2 && fct(tokens[1]) == "TokParanOpen";

			if (name in domain(varTable)) {
				res := varTable[name];
				if (fct(res) == "Op") {
					prec := getOpPrec(args(res)[1]) + getMaxPrec() * (paranLevel + 1);
				}
			} else if (name in varTable["funcs"]) {
				assert(isFollowedByParans, "$name$ is a function and must be followed by parantheses");
			} else if (name notin varTable["unused"]) {
				varTable["unused"] += [name];
			}
			// Name + ParanOpen + ParanClosed are required for it to be a function-call
			if (isFollowedByParans) {
				tokens := tokens[2..];
				idx := idxOfClosedParan(tokens);
				assert(fct(tokens[idx]) == "TokParanClosed", "The index returned by idxOfClosedParan should point to a closing parantheses. Returned index is $idx$ and points at $tokens[idx]$");
				innerArgs := tokens[..idx];
				tokens := tokens[idx+1..];
				params := parseExprList(innerArgs, varTable);
				if (name in varTable["funcs"]) {
					res := @Func(name, params);
				} else if (#params > 1) {
					abort("The variable $name$ is not a valid function. `$name$($join(params, ', ')$)` is a function call, because there are several arguments separated by ','");
				} else {
					innerExpr := params[1];
					prec := getOpPrec("*") + getMaxPrec() * paranLevel;
					res := @Op("*", [res, innerExpr]);
				}
			}

			if (rec) {
				return parseExpr(tokens, varTable, res, prec, paranLevel);
			} else {
				return res;
			}
		case @TokParanOpen():
			tokens := tokens[2..];
			idx := idxOfClosedParan(tokens);
			expr := parseExpr(tokens[..idx-1], varTable, om, om, paranLevel + 1);
			lastPrec := om;
			if (fct(expr) == "Op") {
				lastPrec := getOpPrec(args(expr)[1]) + getMaxPrec() * (paranLevel + 1);
			}
			tokens := tokens[idx+1..];
			if (rec) {
				return parseExpr(tokens, varTable, expr, lastPrec, paranLevel);
			} else {
				return expr;
			}
		default: abort("Error at parseTerm($tokens$) - Unexpected token");
	}
};

tokenize := procedure(str) {
	if (global.DEBUG) {
		print("Tokenizing $str$...");
	}
	toks := [];
	scan(str) {
		regex '\s+': // Skip starting whitespace
		regex 'where\s+':
			toks += [ @TokWhere() ];
		regex '=':
			toks += [ @TokEqual() ];
		regex '[a-z]|[A-Z][a-zA-Z_0-9]*' as [ name ]:
			toks += [ @TokName(name) ];
		regex '(0|[1-9][0-9]*).[0-9]+' as [ num, _ ]:
			toks += [ @TokNum(double(num)) ];
		regex '0|[1-9][0-9]*' as [ num ]:
			toks += [ @TokNum(int(num)) ];
		regex '\(':
			toks += [ @TokParanOpen() ];
		regex '\)':
			toks += [ @TokParanClosed() ];
		regex ',':
			toks += [ @TokComma() ];
		regex '[\^+\-\*/]' as [ op ]:
			toks += [ @TokOp(op) ];
		default: abort("Error at tokenize($str$) - Can't tokenize $str$ properly");
	}
	return toks;
};

stringify := procedure(expr, pretty := true, outsidePrec := om, isFirstOperand := false) {
	if (global.DEBUG) {
		print("Stringifying $expr$ with outsideOp = $outsideOp$...");
	}
	match(expr) {
		case @Name(s):
			return s;
		case @Number(n):
			return "$n$";
		case @Func(f, params):
			params := [ stringify(p, pretty) : p in params ];
			params := join(params);
			return "$f$($params$)";
		case @Op(op, params):
			prec := getOpPrec(op);
			res := om;
			opStr := " $op$ ";
			if (op == "^") {
				opStr := "^";
			}

			if (pretty && op == "*" && exists (p in params | fct(p) == "Name")) {
				[names, nums, others] := mappedSplitList(params, closure(p, i) {
					if (fct(p) == "Name") {
						return [1, stringify(p, pretty)];
					} else if (fct(p) == "Number") {
						return [2, stringify(p, pretty)];
					} else {
						return [3, stringify(p, pretty, prec, i == 1)];
					}
				}, 3);
				assert(#nums <= 1, "A product shouldn't have more than 1 number after being evaluated");
				res := join(nums + names, "");
				res := join([res] + others, opStr);
			} else {
				params := map(params, [p, i] |=> stringify(p, pretty, prec, i == 1));
				res := join(params, opStr);
			}

			if (isInteger(outsidePrec) && (outsidePrec > prec || (outsidePrec == prec && !isFirstOperand))) {
				return "($res$)";
			} else {
				return res;
			}
		default: abort("Error at stringify($expr$, $outsideOp$) - Unexpected expression.");
	}
};

evalStr := procedure(strs, pretty := true, includeBefore := true, toPrint := true, rules := global.rules, varTable := global.varTable) {
	pad := 0;
	if (isList(strs)) {
		lengths := [#s : s in strs];
		pad := max(lengths);
	} else {
		strs := [strs];
	}

	outStrs := [];
	for (s in strs) {
		// global.DEBUG := true;
		// global.DEBUG := false;
		tokens := tokenize(s);
		vt := varTable;
		expr := parse(tokens, vt);
		res := eval(expr, {}, rules);
		outStr := stringify(res, pretty);

		if (includeBefore) {
			padding := '';
			if (pad > #s) {
				padding := ' ' * (pad - #s);
			}
			outStr := "$s$$padding$ -->  $outStr$";
		}
		if (toPrint) {
			print(outStr);
		}
		outStrs += [outStr];
	}
	return outStrs;
};
