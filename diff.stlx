load("evaluator.stlx");
load("parser.stlx");
load("variables.stlx");


class global() {
	static {
		rules := makeDefaultRules();
		varTable := variableHandler.def();
		DEBUG := false;
	}
}

evalStr := procedure(strs, pretty := true, includeBefore := true, toPrint := true, rules := global.rules, varTable := global.varTable) {
	pad := 0;
	if (isList(strs)) {
		lengths := [#s : s in strs];
		pad := max(lengths);
	} else {
		strs := [strs];
	}

	outStrs := [];
	for (s in strs) {
		// global.DEBUG := true;
		// global.DEBUG := false;
		tokens := tokenize(s);
		vt := varTable.clone();
		expr := parse(tokens, vt);
		res := eval(expr, {}, vt, rules);
		outStr := stringify(res, pretty);

		if (includeBefore) {
			padding := '';
			if (pad > #s) {
				padding := ' ' * (pad - #s);
			}
			outStr := "$s$$padding$ -->  $outStr$";
		}
		if (toPrint) {
			print(outStr);
		}
		outStrs += [outStr];
	}
	return outStrs;
};
