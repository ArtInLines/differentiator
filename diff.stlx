// Terms:
// @Number(n) where n is some number
// @Symbol(s) where s is some string
// @Expr(op, ..args) where op is the string of an accepted operator (see below) and where args is a variable number of arguments, each of which is either @Number, @Symbol or @Expr
//

// Allowed Operators:
// '+' -> Addition
// '-' -> Subtraction or Negation if only one argument was given
// '*' -> Multiplication
// '/' -> Division
// '\' -> Integer Division
// '%' -> Modulo
// '**' -> Exponentiation
// 'diff' -> Differentiation
	// 1. arg - @Number, @Symbol, @Expr - Expression to differentiate
	// 2. arg - @Symbol - Symbol to differentiate by. All other symbols will be treated as constants
// "int" -> Integration
	// 1. arg - @Number, @Symbol, @Expr - Start value of the integration; asserted to not be higher than the end value
	// 2. arg - @Number, @Symbol, @Expr - End value of the integration; asserted to not be lower than the start value
	// 3. arg - @Number, @Symbol, @Expr - Expression to integrate
	// 4. arg - @Symbol - Symbol to integrate by. All other symbols will be treated as constants
// 'sin' -> Sine of value
// 'cos' -> Cosine of value

operator_precedence := procedure(op) {
	match(op) {
		case "+":
			return 1;
		case "-":
			return 1;
		case "*":
			return 2;
		case "/":
			return 2;
		default: abort("Error at operator_precedence($op$)");
	}
};

diff := procedure(expr, sym) {
	match(expr) {
		case @Number(n):
			return @Number(0);
		case @Symbol(x) | x == args(sym)[1]:
			return @Number(1);
		case @Symbol(x):
			return @Number(0);
		case @Expr("+", a, b):
			return eval(@Expr("+", diff(a, sym), diff(b, sym)));
		case @Expr("-", a, b):
			return eval(@Expr("-", diff(a, sym), diff(b, sym)));
		case @Expr("*", a, b):
			return eval(@Expr("+",
							@Expr("*", diff(a, sym), b),
							@Expr("*", a, diff(b, sym))));
		case @Expr("/", a, b):
			return eval(@Expr("/",
							@Expr("-",
								@Expr("*", diff(a, sym), b),
								@Expr("*", a, diff(b, sym))),
							@Expr("*", b, b)));
		case @Expr("diff", a, b):
			return diff(diff(a, b), sym);
		case @Expr("sin", a):
			return eval(@Expr("cos", a));
		case @Expr("cos", a):
			return eval(@Expr("sin", a));
		default: abort("Error at diff($expr$, $sym$)");
	}
};

eval := procedure(t) {
	if (isString(t)) {
		t := parse_expr(t);
	}
	// print("Evaluating $t$...");
	match(t) {
		case @Number(n):
			return t;
		case @Symbol(s):
			return t;
		case @Expr("-", a):
			match(a) {
				case @Number(n):
					return @Number(-1 * n);
				default:
					return a;
			}
		case @Expr("+", @Number(0), b):
			return b;
		case @Expr("+", a, @Number(0)):
			return a;
		case @Expr("*", @Number(1), b):
			return b;
		case @Expr("*", a, @Number(1)):
			return a;
		case @Expr("*", a, b) | a == @Number(0) || b == @Number(0):
			return @Number(0);
		case @Expr("/", a, @Number(0)):
			abort("Division by Zero.");
		case @Expr("/", @Number(0), b):
			return @Number(0);
		case @Expr("diff", expr, sym):
			return diff(expr, sym);
		// case @Expr("int", start, end, expr, sym):
			// TODO
		case @Expr("sin", @Number(n)):
			return @Number(sin(n));
		case @Expr("cos", @Number(n)):
			return @Number(cos(n));
		case @Expr(f, @Symbol(s)) | f == "sin" || f == "cos":
			return t;
		case @Expr(f, expr) | (f == "sin" || f == "cos") && fct(expr) == "Expr":
			expr := eval(expr);
			if (fct(expr) == "Expr") {
				return makeTerm("Expr", [f, expr]);
			} else {
				return eval(@Expr(f, expr));
			}
		case t | fct(t) == "Expr":
			op := args(t)[1];
			argz := args(t)[2..];
			argz := [ eval(a) : a in argz ];

			if (forall (a in argz | fct(a) == "Number")) {
				match(op) {
					case "+":
						return @Number(argz[1] + argz[2]);
					case "-":
						return @Number(argz[1] - argz[2]);
					case "*":
						return @Number(argz[1] * argz[2]);
					case "/":
						return @Number(argz[1] / argz[2]);
					case "sin":
						return @Number(sin(argz[1]));
					case "cos":
						return @Number(cos(argz[1]));
					default: abort("Error at eval($t$)");
				}
			} else {
				return makeTerm("Expr", [op] + argz);
			}
		default: abort("Error at eval($t$)");
	}
};

tokenize := procedure(str) {
	tokens := [];
	scan (str) {
		regex '\s+': // Skip starting whitespace
		regex 'diff':
			tokens += [@Func("diff")];
		regex 'sin':
			tokens += [@Func("sin")];
		regex 'cos':
			tokens += [@Func("cos")];
		regex '0|[1-9][0-9]*' as [ num ]:
			tokens += [@Number(int(num))];
		regex '[a-zA-z]' as [ sym ]:
			tokens += [@Symbol(sym)];
		regex '[+\-*/]' as [ op ]:
			tokens += [@Op(op)];
		regex ',':
			tokens += [@Comma()];
		regex '\(':
			tokens += [@ParanOpen()];
		regex '\)':
			tokens += [@ParanClosed()];
	}
	return tokens;
};


// Grammar for parsing:
// expression = term | expression "+" term | expression "-" term
// term = factor | term "*" factor | term "/" factor
// factor = number | symbol | "(" + expression + ")" | function + "([arg[, arg]*])"

parse_expression := procedure(tokens, last := om) {
	// print("Parsing Expression $tokens$...");
	if (tokens == []) {
		return last;
	}
	if (last == om) {
		return parse_term(tokens, om);
	} else {
		match (tokens[1]) {
			case @Op("+"):
				return @Expr("+", last, parse_term(tokens[2..]));
			case @Op("-"):
				return @Expr("-", last, parse_term(tokens[2..]));
			default:
				return parse_term(tokens, last);
		}
	}
};

parse_term := procedure(tokens, last := om) {
	// print("Parsing Term $tokens$...");
	if (tokens == []) {
		return om;
	}
	if (last == om) {
		return parse_factor(tokens);
	} else {
		match(tokens[1]) {
			case @Op("*"):
				return @Expr("*", last, parse_factor(tokens[2..]));
			case @Op("/"):
				return @Expr("/", last, parse_factor(tokens[2..]));
			case @Symbol(s):
				return @Expr("*", last, tokens[1]);
			case @Number(n) | fct(last) == "Symbol":
				return @Expr("*", last, tokens[1]);
			case @ParanOpen():
				return @Expr("*", last, parse_factor(tokens));
			default:
				abort("Error at parse_term($tokens$, $last$)");
		}
	}
};

parse_factor :=	procedure(tokens) {
	// print("Parsing Factor $tokens$...");
	if (tokens == []) {
		return om;
	}
	match(tokens[1]) {
		case @Number(n):
			return parse_expression(tokens[2..], tokens[1]);
		case @Symbol(s):
			return parse_expression(tokens[2..], tokens[1]);
		case @Func(f):
			if (tokens[2] != @ParanOpen()) {
				abort("Function names need to be followed by parantheses");
			}
			args := collect_args(tokens[3..], 1);
			// print("Collected Args: $args$");
			match(f) {
				case "diff":
					if (#args != 2) {
						abort("Differentiation needs 2 arguments, first the expression and then the variable to differentiate by.");
					}
					if (#args[2] == 1 && fct(args[2][1]) != "Symbol") {
						abort("The second argument to Differentiation must be a symbol.");
					}
					return @Expr("diff", parse_expression(args[1]), args[2][1]);
				case "sin":
					if (#args != 1) {
						abort("sin(x) expects exactly one argument");
					}
					return @Expr("sin", parse_expression(args[1]));
				case "cos":
					if (#args != 1) {
						abort("cos(x) expects exactly one argument");
					}
					return @Expr("cos", parse_expression(args[1]));
			}
		case @ParanOpen():
			len := #tokens;
			parans := 1;
			i := 2;
			while (true) {
				if (tokens[i] == @ParanOpen()) {
					parans += 1;
				} else if (tokens[i] == @ParanClosed()) {
					parans -= 1;
					if (parans == 0) {
						break;
					}
				}
				i += 1;
				if (len < i) {
					abort("Error at parse_factor($tokens$): Unmatched Parantheses.");
				}
			}
			return parse_expression(tokens[i+1..], parse_expression(tokens[2..i-1]));
		default:
			abort("Error at parse_factor($tokens$) - Unexpected Token");
	}
};

collect_args := procedure(rw tokens, parans) {
	// print("Collecting args $tokens$...");
	og_parans := parans;
	args := [];
	i := 1;
	while (true) {
		match(tokens[i]) {
			case @ParanOpen():
				parans += 1;
			case @ParanClosed():
				parans -= 1;
				if (parans + 1 == og_parans) {
					args += [tokens[..i-1]];
					tokens := tokens[i+1..];
					break;
				}
			case @Comma():
				if (parans == og_parans) {
					args += [tokens[..i-1]];
					tokens := tokens[i+1..];
					i := 0;
				}
		}
		i += 1;
		if (#tokens < i) {
			abort("Error at parse_factor($tokens$): Unmatched Parantheses.");
		}
	}
	return args;
};


parse_expr := procedure(str) {
	tokens := tokenize(str);
	return parse_expression(tokens);
};

stringify_expr := procedure(expr, outsideOp := om) {
	// print("Stringifying $expr$...");
	match(expr) {
		case @Number(n):
			return "$n$";
		case @Symbol(s):
			return s;
		case @Expr(op, a, b):
			if (outsideOp != om && operator_precedence(outsideOp) > operator_precedence(op)) {
				return "(" + stringify_expr(a, op) + " " + op + " " + stringify_expr(b, op) + ")";
			} else {
				return stringify_expr(a, op) + " " + op + " " + stringify_expr(b, op);
			}
		case @Expr(op, a):
			return op + "(" + stringify_expr(a, om) + ")";
		default: abort("Error at stringify_expr($expr$, $outsideOp$)");
	}
};

evalStr := procedure(str) {
	return stringify_expr(eval(str));
};

// Test:
// print("Expected: 7/5  -  Received: ", stringify_expr(eval(@Expr("*", @Number(7), @Expr("diff", (@Expr("/", @Symbol("x"), @Number(5))), @Symbol('x'))))));
// print("Expected: @Expr('*', @Expr('+', @Symbol('a'), @Number(7)), @Number(34))  -  Received: ", eval("(a + 7) * 34"));
// print("Expected: @Number(12)  -  Received: ", eval("5 + 7"));
// print("Expected: @Expr('*', @Number(5), @Symbol('x'))  -  Received: ", eval("5x"));
// print("Expected: @Expr('*', @Number(5), @Expr('+', @Symbol('x'), @Number(1)))  -  Received: ", eval("5(x+1)"));

print(evalStr("(a + 7) * 34"));
print(evalStr("diff(diff(x * x * y, x), y)"));
print(evalStr("diff(sin(cos(x)), x)"));
