reduceFromFirst := procedure(l, f, rev := false) {
	assert(l != [], "reduceFromFirst expects a non-empty list as input");
	if (rev) {
		res := l[-1];
		for (i in {2..#l}) {
			res := f(l[-i], res);
		}
		return res;
	} else {
		res := l[1];
		for (x in l[2..]) {
			res := f(res, x);
		}
		return res;
	}
};

join := procedure(l, del := ", ") {
	match(l) {
		case []:    return "";
		case [x]:   return "$x$";
		case [x|r]: return "$x$$del$$join(r, del)$";
	}
};

// Returns true, if at least f(x) returns true for at least two elements in l
some := procedure(l, f) {
	foundOne := false;
	for (x in l) {
		if (f(x)) {
			if (!foundOne) {
				foundOne := true;
			} else {
				return true;
			}
		}
	}
	return false;
};

// Splits a list in two sublists.
// The first sublists contains all elements for which f(x) is true.
// The second sublist contains all other elements.
splitListInTwo := procedure(l, f) {
	a := [];
	b := [];
	for (x in l) {
		if (f(x)) {
			a += [x];
		} else {
			b += [x];
		}
	}
	return [a, b];
};