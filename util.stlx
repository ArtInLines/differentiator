identity := procedure(x) {
	return x;
};

reduceFromFirst := procedure(l, f, rev := false) {
	assert(l != [], "reduceFromFirst expects a non-empty list as input");
	if (rev) {
		res := l[-1];
		for (i in {2..#l}) {
			res := f(l[-i], res);
		}
		return res;
	} else {
		res := l[1];
		for (x in l[2..]) {
			res := f(res, x);
		}
		return res;
	}
};

join := procedure(l, del := ", ") {
	match(l) {
		case []:    return "";
		case [x]:   return "$x$";
		case [x|r]: return "$x$$del$$join(r, del)$";
	}
};

// Returns true, if at least f(x) returns true for at least two elements in l
some := procedure(l, f) {
	foundOne := false;
	for (x in l) {
		if (f(x)) {
			if (!foundOne) {
				foundOne := true;
			} else {
				return true;
			}
		}
	}
	return false;
};

// Splits a list in two sublists.
// The first sublists contains all elements for which f(x) is true.
// The second sublist contains all other elements.
splitListInTwo := procedure(l, f) {
	a := [];
	b := [];
	for (x in l) {
		if (f(x)) {
			a += [x];
		} else {
			b += [x];
		}
	}
	return [a, b];
};

// Splits a list into several sublists
// f should return a number, determining the sublist for the given element
// if f returns a negative number, the element will be put into the last sublist.
splitList := procedure(l, f, sublistAmount) {
	return mappedSplitList(l, [x, i] |=> [f(x), x], sublistAmount);
};

// Splits a list into several sublists and maps each element to a new form
// f receives the current element and its index as input
// f should return a number and the mapped element, determining the sublist for the given element
// if f returns a negative number, the element will be put into the last sublist.
mappedSplitList := procedure(l, f, sublistAmount := om, range := {1..#l}) {
	res := [];
	if (isInteger(sublistAmount)) {
		res := [[]] * sublistAmount;
	}
	others := [];
	for(i in range) {
		[ i, x ] := f(l[i], i);
		if (i < 0) {
			others += [x];
		}
		else {
			if (i > #res) {
				res += [[]] * (i - #res);
			}
			res[i] += [x];
		}
	}
	if (#others > 0) {
		res += [others];
	}
	assert(#res == sublistAmount, "mappedSplitList should return exactly sublistAmount ($sublistAmount$) many sublists, but it instead produced $#res$ sublists.");
	return res;
};

// f is applied to each element in the list. f receives the element and its index as arguments
map := procedure(l, f, range := {1..#l}) {
	return [ f(l[i], i) : i in range ];
};

flatten := procedure(l, dim := om) {
	nextDim := om;
	if (isInteger(dim)) {
		nextDim := dim - 1;
	}
	match(l) {
		case []:
			return [];
		case [x|r]:
			if (isList(x) && (dim == om || dim > 0)) {
				x := flatten(x, nextDim);
			} else {
				x := [x];
			}
			return x + flatten(r, nextDim);
	}
};