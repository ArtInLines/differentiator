load("diff.stlx");

testSameExpr := procedure(x, y) {
	if (fct(x) != fct(y)) {
		return false;
	}
	match(x) {
		case @Op(xop, xs):
			[yop, ys] := args(y);
			if (yop != xop || #xs != #ys) {
				return false;
			}
			match(xop) {
				regex '\+|\*':
					for(xa in xs) {
						i := findIndex(ys, ya |=> testSameExpr(xa, ya));
						if (i < 0) {
							return false;
						} else {
							ys := ys[..i-1] + ys[i+1..];
						}
					}
					return true;
				regex '-|/|^':
					if (!testSameExpr(xs[1], ys[1])) {
						return false;
					}
					[xs, ys] := [xs[2..], ys[2..]];
					for(xa in xs) {
						i := findIndex(ys, ya |=> testSameExpr(xa, ya));
						if (i < 0) {
							return false;
						} else {
							ys := ys[..i-1] + ys[i+1..];
						}
					}
					return true;
				default:
					return xs == ys;
			}
		default:
			return x == y;
	}
};

test := procedure(file, debugOnException := true, inOutDelimiter := "-->") {
	passedTestsCtr := 0;
	warnings := [];
	fails := [];
	lines := readFile(file);
	tests := [ x : x in [split(l, inOutDelimiter) : l in lines] | #x == 2 ];
	i := 0;
	for ([input, expected] in tests) {
		expected := trim(expected);
		i += 1;
		try {
			vt := global.varTable;
			toks := tokenize(input);
			expr := parse(toks, vt);
			res := eval(expr, {}, vt, global.rules);
			resStr := trim(stringify(res, true));

			if (resStr == expected) {
				passedTestsCtr += 1;
				continue;
			}

			toks := tokenize(resStr);
			expr := parse(toks, vt);

			vt := global.varTable;
			expectedToks := tokenize(expected);
			expectedExpr := parse(expectedToks, vt);
			expectedRes := eval(expectedExpr, {}, vt, global.rules);

			if (expectedToks == toks) {
				warnings += ["Expected output of $i$. test has different String-representation:\n    Input: $input$\n    Expected: $expected$\n    Received: $resStr$"];
			} else if (testSameExpr(expectedExpr, expr)) {
				warnings += ["Expected output of $i$. test has different Token-representation:\n    Input: $input$\n    Expected: $expectedToks$\n    Received: $toks$"];
			} else if (testSameExpr(expectedRes, res)) {
				warnings += ["Expected output of $i$. test has different Expression-representation:\n    Input: $input$\n    Expected: $expectedExpr$\n    Received: $expr$"];
			} else {
				fails += ["$i$. test failed.\n    Input: $input$\n    Expected: $expected$\n    Received: $resStr$"];
			}
		} catch (e) {
			if (debugOnException) {
				global.DEBUG := true;
				try {
					toks := tokenize(input);
					expr := parse(toks, vt);
					res := eval(expr, {}, vt, global.rules);
					resStr := trim(stringify(res, true));
				} catch (e2) {}
				global.DEBUG := false;
				fails += ["$i$. test with input '$input$' failed with the following error: $e$. See Debug-Output above"];
			} else {
				fails += ["$i$. test with input '$input$' failed with the following error: $e$"];
			}
		}
	}

	print("[INFO]: $passedTestsCtr$ tests passed");
	if (warnings != []) {
		print("[INFO]: $#warnings$ warnings.");
		for (w in warnings) {
			print("  [WARN]: $w$");
		}
	}
	if (fails != []) {
		printErr("[INFO]: $#fails$ fails.");
		for (f in fails) {
			print("  [FAIL]: $f$");
		}
	}
};

test("./tests.txt");