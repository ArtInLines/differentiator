load("util.stlx");


addOpRule := procedure(rw rules, op, test, eval) {
	if (op in domain(rules)) {
		rules[op] += [[test, eval]];
	} else {
		rules[op] := [[test, eval]];
	}
	return rules;
};

addOpRules := procedure(rw rules, op, newRules) {
	for (newRule in newRules) {
		assert(#newRule == 2, "An evalutation rule always has to consist of exactly two functions, a test and an eval function.");
		addOpRule(rules, op, newRule[1], newRule[2]);
	}
	return rules;
};

class cachedExprRuleClass(op, calcCacheVal, replace) {
	op := op;
	calcCacheVal := calcCacheVal;
	replace := replace;
	cachedVal := om;
	test := procedure(params) {
		cachedExprs := {};
		for (p in params) {
			val := this.calcCacheVal(p);
			if (val != om) {
				if (val in cachedExprs) {
					this.cachedVal := val;
					return true;
				}
				cachedExprs += {val};
			}
		}
		return false;
	};
	eval := procedure(params) {
		assert(this.cachedVal != om, "Cached Value shouldn't be able to be om, since values that are om should get discarded.");
		[ sames, others ] := splitListInTwo(params, p |=> cachedVal == calcCacheVal(p));
		replacement := this.replace(sames);
		if (others == []) {
			return replacement;
		} else {
			return @Op(this.op, others + [replacement]);
		}
	};
}

// op is the operation combining the other values with the replacement of the matched value (usually the same operation as the one for which the rule is defined)
// calcCacheVal is a function taking a single expression as input. It should return a cache value for comparing with the cache values of the other parameters in params. Return `om` if you want to ignore said expression. If there are two or more expression with the same cache value, the rule applies.
// replace is a function taking the list of expressions, that were matched as same with calcCacheVal. It should return an expression to use in their stead. If all expressions matched it, the replacement will be returned directly. Otherwise it will be connected with the other expression using the operator from `op`.
cachedExprRule := closure(op, calcCacheVal, replace) {
	r := cachedExprRuleClass(op, calcCacheVal, replace);
	return [params |=> r.test(params), params |=> r.eval(params)];
};

someSameExprsRule := procedure(op, replace) {
	return cachedExprRule(op, p |-> p, replace);
};

allNumRule := procedure(reduceOp, reversed := false) {
	return [
		params |-> forall (p in params | fct(p) == "Number"),
		params |=> @Number(reduceFromFirst([ args(p)[1] : p in params ], reduceOp, reversed))
	];
};

// Assumes the operation to be commutative (at least for elements after the firstN)
someNumRule := procedure(op, reduceOp, reversed := false, skipFirstN := 0) {
	return [
		params |=> some(params[1 + skipFirstN..], p |-> fct(p) == "Number"),
		closure(params) {
			[ nums, others ] := splitListInTwo(params[1 + skipFirstN..], p |-> fct(p) == "Number");
			others := params[1..skipFirstN] + others;
			n := reduceFromFirst([ args(n)[1] : n in nums ], reduceOp, reversed);
			if (others == []) {
				return @Number(n);
			} else {
				return @Op(op, others + [@Number(n)]);
			}
		}
	];
};

associativeRule := procedure(op, termFct := "Op", skipFirstN := 0) {
	return [
		params |=> exists (p in params[1 + skipFirstN..] | fct(p) == termFct && args(p)[1] == op),
		closure(params) {
			res := params[1..skipFirstN];
			for (p in params[1 + skipFirstN..]) {
				if (fct(p) == termFct && args(p)[1] == op) {
					res += args(p)[2];
				} else {
					res += [p];
				}
			}
			return @Op(op, res);
		}
	];
};

neutralElRule := procedure(op, e, skipFirstN := 0) {
	return [
		params |=> exists (p in params[1 + skipFirstN..] | fct(p) == "Number" && args(p)[1] == e),
		closure(params) {
			params := params[1..skipFirstN] + [ p : p in params[1 + skipFirstN..] | fct(p) != "Number" || args(p)[1] != e ];
			if (#params == 1) {
				return params[1];
			} else {
				return @Op(op, params);
			}
		}
	];
};

nullElRule := procedure(op, null, res, skipFirstN := 0) {
	return [
		params |=> exists (p in params[1 + skipFirstN..] | fct(p) == "Number" && args(p)[1] == null),
		params |=> res
	];
};

// cmpType can be positive, negative or 0. If 0, the arity has to be equal to the provided one. If positive, the arity has to be greater than or equal. If negative, the arity has to be less than or equal.
checkArityRule := procedure(op, arity, cmpType := 0) {
	return [
		closure(params) {
			if (cmpType == 0) {
				return #params != arity;
			} else if (cmpType < 0) {
				return #params > arity;
			} else {
				return #params < arity;
			}
		},
		params |=> abort("$op$ exprects $arity$ argument(s), but received $#params$ argument(s).")
	];
};

chainRule := procedure(f, innerRules) {
	// Assume each rule in innerRules is a list with two elements, where the first element is the name of the function and the second element is a function taking the parameters as input and returning an expression as output
	return [
		params |=> fct(params[1]) == "Func" && args(params[1])[1] in domain(innerRules),
		closure(params) {
			fname := args(params[1])[1];
			fparams := args(params[1])[2];
			otherParams := params[2..];
			fdiff := innerRules[fname];
			return @Op("*", [@Func(f, fparams + otherParams), fdiff(fparams)]);
		}
	];
};

makeRules := procedure(rules, singleRulePerOp := false) {
	res := {};
	for (r in rules) {
		assert(#r == 2, "Every rule must be a list with two elements.");
		if (singleRulePerOp) {
			res[r[1]] := r[2];
		} else {
			addOpRules(res, r[1], r[2]);
		}
	}
	return res;
};

makeDiffFuncRules := procedure() {
	return makeRules([
		["sin", params |-> @Func("cos", params)],
		["cos", params |-> @UnaryOp("-", @Func("sin", params))]
	], true);
};

makeDefaultRules := procedure(diffFuncRules := makeDiffFuncRules()) {
	return makeRules([
		["^", [
			checkArityRule("^", 2, 1),
			nullElRule("^", 0, @Number(1)),
			someNumRule("^", [a, b] |-> a ** b, true),
			neutralElRule("^", 1),
			[
				params |-> #params > 2,
				params |-> @Op("^", [params[1], @Op("*", params[2..])])
			]
		]],
		["+", [
			checkArityRule("+", 2, 1),
			associativeRule("+", "Op"),
			someNumRule("+", [a, b] |-> a + b),
			someSameExprsRule("+", sames |-> @Op("*", [@Number(#sames), sames[1]])),
			neutralElRule("+", 0)
		]],
		["*", [
			// Must have at least 2 operands
			checkArityRule("*", 2, 1),
			// a * (b * c) = (a * b) * c = a * b * c
			associativeRule("*", "Op"),
			// 0 * a == 0
			nullElRule("*", 0, @Number(0)),
			// calculate number operands
			someNumRule("*", [a, b] |-> a * b),
			// a * a == a ^ 2
			someSameExprsRule("*", sames |-> @Op("^", [sames[1], @Number(#sames)])),
			// a * 1 == a
			neutralElRule("*", 1),
			// (a ^ b) * (a ^ c) == a ^ (b + c)
			cachedExprRule("*", procedure(p) {
				match(p) {
					case @Op(op, params):
						if (op == "^") {
							return params[1];
						} else {
							return om;
						}
					case @Func(f, params):
						return om;
					case @Name(x):
						return x;
					case @Number(x):
						return x;
				}
			}, procedure(sames) {
				// whether "^" operation, name or number, the base is always given by the first argument
				base := args(sames[1])[1];
				exps := [];
				for (x in sames) {
					if (fct(x) == "Op") {
						l := args(x)[2..];
						if (#l == 1) {
							exps += l;
						} else {
							exps += [@Op("*", l)];
						}
					} else {
						exps += [@Number(1)];
					}
				}
				return @Op("^", [base, @Op("+", exps)]);
			}),
			// a * b * (c +/- d)  ==  a * b * c  +/-  a * b * d
			// TODO: Currently only applies if there is exactly one paranthesized expression - is this wanted?
			// TODO: Port rule to "/" (or generalize into an abstract rule?)
			[
				params |-> #[p : p in params | fct(p) == "Op" && args(p)[1] in {"+", "-"}] == 1 && exists ( p in params | fct(p) != "Op" || args(p)[1] notin {"+", "-"} ),
				procedure(params) {
					[distributables, others] := splitListInTwo(params, p |-> fct(p) == "Op" && args(p)[1] in {"+", "-"});

					assert(#distributables == 1, "Rule should currently only apply if there is exactly one paranthesized expression to distribute");
					[distOp, distParams] := args(distributables[1]);
					return @Op(distOp, [ @Op("*", others + [dp]) : dp in distParams ]);
				}
			]
		]],
		["-", [
			[
				params |-> #params == 1,
				params |-> @Op("-", [@Number(0)] + params)
			],
			checkArityRule("-", 2, 1),
			associativeRule("-", "Op", 1),
			allNumRule([a, b] |-> a - b),
			someNumRule("-", [a, b] |-> a + b, false, 1),
			neutralElRule("-", 0, 1)
		]],
		["/", [
			checkArityRule("/", 2, 1),
			[
				params |-> exists (p in params[2..] | fct(p) == "Number" && args(p)[1] == 0),
				params |-> abort("Division by 0,")
			],
			[
				params |-> fct(params[1]) == "Number" && args(params[1])[1] == 0,
				params |-> @Number(0)
			],
			associativeRule("/", "Op", 1),
			allNumRule([a, b] |-> a / b),
			someNumRule("/", [a, b] |-> a * b, false, 1),
			neutralElRule("/", 1, 1)
		]],
		["diff", [
			checkArityRule("diff", 2),
			[
				params |-> fct(params[1]) == "Number",
				params |-> @Number(0)
			],
			[
				params |-> fct(params[1]) == "Name" && params[1] == params[2],
				params |-> @Number(1)
			],
			[
				params |-> fct(params[1]) == "Name",
				params |-> @Number(0)
			],
			[
				params |-> fct(params[1]) == "Op" && args(params[1])[1] == "+",
				params |-> @Op("+", [ @Func("diff", [x, params[2]]) : x in args(params[1])[2] ])
			],
			[
				params |-> fct(params[1]) == "Op" && args(params[1])[1] == "-",
				params |-> @Op("-", [ @Func("diff", [x, params[2]]) : x in args(params[1])[2] ])
			],
			[
				params |-> fct(params[1]) == "Op" && args(params[1])[1] == "^",
				procedure(params) {
					sym := params[2];
					opTerm := params[1];
					base := args(opTerm)[2][1];
					exps := args(opTerm)[2][2..];
					if (base == sym) {
						// TODO:
						assert(#exps == 1 && fct(exps[1]) == "Number", "Differentiation of exponents that are more complex expressions than single numbers aren't implemented yet.");
						n := args(exps[1])[1];
						if (n == 0) {
							return @Func("diff", @Number(1));
						} else if (n == 1) {
							return @Func("diff", sym);
						} else {
							return @Op("*", [@Number(n), @Op("^", [sym, @Number(n-1)])]);
						}
					} else if (fct(base) == "Op" || fct(base) == "Func") {
						assert(false, "Differentiation of exponents of operator or function bases are not implemented yet.");
					} else {
						return @Number(0);
					}
				}
			],
			[
				params |-> fct(params[1]) == "Op" && args(params[1])[1] == "*",
				procedure(params) {
					sym := params[2];
					opTerm := params[1];
					opArgs := args(opTerm)[2];
					inner := [ @Op("*", [@Func("diff", [opArgs[i], sym])] + [opArgs[j] : j in {1..#opArgs} | i != j]) : i in {1..#opArgs} ];
					return @Op("+", inner);
				}
			],
			[
				params |-> fct(params[1]) == "Op" && args(params[1])[1] == "/",
				procedure(params) {
					sym := params[2];
					opTerm := params[1];
					opArgs := args(opTerm)[2];
					inner := [ @Op("*", [@Func("diff", [opArgs[i], sym])] + [opArgs[j] : j in {1..#opArgs} | i != j]) : i in {1..#opArgs} ];
					dens := [ @Op("*", [x, x]) : x in opArgs[2..] ];
					return @Op("/", [@Op("-", inner)] + dens);
				}
			],
			chainRule("diff", diffFuncRules)
		]],
		["sin", [
			checkArityRule("sin", 1),
			[
				params |-> fct(params[1]) == "Number",
				params |-> sin(params[1][1])
			]
		]],
		["cos", [
			checkArityRule("cos", 1),
			[
				params |-> fct(params[1]) == "Number",
				params |-> cos(params[1][1])
			]
		]]
	]);
};